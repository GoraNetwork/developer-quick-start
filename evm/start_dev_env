#!/bin/bash

# Enable command tracing if asked.
[ "$GORA_DEV_EVM_SETUP_DEBUG" ] && set -x

GETH_BIN=./geth
GETH_HOST=http://127.0.0.1

# Support for master/slave chain setup is now removed, but is likely to come
# back. Hence treatment of the only chain as "master".
GETH_PORT_MASTER=8546
GETH_URL_MASTER=$GETH_HOST:$GETH_PORT_MASTER

NODE_STAKE=10000
FUND_AMOUNT=1000000000
FUND_DELAY=2
MASTER_CHAIN=baselocal

# Check prerequisites for development environment.
function check_prereqs {

  echo 'Checking prerequisites'
  if (( $(id -u ) > 0 )); then
      echo 'Running as a normal user as required'
  else
      echo 'This script cannot be run as root, please do it as a normal user';
      exit 1
  fi


  if [ docker --version 2&> /dev/null ]; then
      echo 'Docker is missing or unavailable'
      exit 1
  fi
  echo 'Docker found'

  if [ ./geth --version 2&> /dev/null ]; then
      echo 'Cannot run ./geth, check your libc version or build your own geth and replace the one in this directory'
      exit 1
  fi
  echo './geth run successfully'
}

# Start geth instances for given chain names.
function start_geth {

  for CHAIN_ROLE in MASTER; do

    GETH_CHAIN_VAR="${CHAIN_ROLE}_CHAIN";
    CHAIN=${!GETH_CHAIN_VAR}
    if [ ! $CHAIN ]; then
      continue;
    fi

    echo "Starting up EVM node instance for chain: $CHAIN"
    MASTER_ADDR=$(cat ./master_addr_$CHAIN.txt)
    FUND_CODE="eth.sendTransaction({from: eth.accounts[0], to: \"$MASTER_ADDR\", value: web3.toWei($MASTER_ADDR, \"ether\")})"

    GETH_PORT_VAR="GETH_PORT_$CHAIN_ROLE"
    export GETH_HTTP_PORT=${!GETH_PORT_VAR} # must export for geth to pick up
    GETH_URL="$GETH_HOST:$GETH_HTTP_PORT"
    GETH_LOG="geth_$CHAIN.log"

    echo "Starting $GETH_BIN on $GETH_URL, see $GETH_LOG for saved output"
    $GETH_BIN --dev --http --ipcdisable >$GETH_LOG 2>&1 &
    CHILD_PIDS+=" $!"
    LOGS+=" ./$GETH_LOG"

    sleep $FUND_DELAY
    echo "Funding '$MASTER_ADDR' with '$FUND_AMOUNT'"
    $GETH_BIN --vmdebug --verbosity 5 --exec "$FUND_CODE" attach $GETH_URL

  done
}

# Configure local Gora node.
function setup_gora_config {

  GORA_DEV_CLI_TOOL="${GORA_DEV_CLI_TOOL:-../gora_cli}"
  export GORA_CONFIG_FILE='./.gora'

  export GORA_CONFIG="
  {
    \"blockchain\": {
      \"evm\": {
        \"networkDefaults\": {
          \"polling\": 500,
          \"voteEth\": 10000000,
          \"stakeEth\": 10000000
        },
        \"networks\": {
          \"$MASTER_CHAIN\": {
            \"type\": \"testnet\",
            \"server\": \"$GETH_URL_MASTER\",
            \"mainContract\": \"$(cat ./main_$MASTER_CHAIN.addr)\",
            \"privKey\": \"$(cat ./master_key_$MASTER_CHAIN.txt)\"
          }
        }
      }
    },
    \"deployment\": {
      \"id\": \"gora-nr-dev\",
      \"logLevel\": 5,
      \"stackTrace\": 1
    }
  }
  "
}

# Deploy Gora smart contracts.
function deploy_gora_contracts {

  echo "Deploying Gora smart contracts"
  export GORA_DEV_EVM_DEPLOY_KEY="./master_key_$MASTER_CHAIN.txt"

  GORA_DEV_EVM_DEPLOY_CONSTR_ARG_0="$(cat ./master_addr_$MASTER_CHAIN.txt)" \
  GORA_DEV_EVM_DEPLOY_CONSTR_ARG_1='GORA token' \
  GORA_DEV_EVM_DEPLOY_CONSTR_ARG_2='GORA' \
    ./deploy $GETH_URL_MASTER token token_$MASTER_CHAIN.addr GoraToken.sol

  GORA_DEV_EVM_DEPLOY_INIT_ARG_0=$(cat ./token_$MASTER_CHAIN.addr) \
  GORA_DEV_EVM_DEPLOY_INIT_ARG_1=0 \
  GORA_DEV_EVM_DEPLOY_INIT_ARG_2=0 \
  GORA_DEV_EVM_DEPLOY_INIT_ARG_3=0 \
  GORA_DEV_EVM_DEPLOY_INIT_ARG_4=0 \
  GORA_DEV_EVM_DEPLOY_INIT_ARG_5=$MASTER_ADDR \
  GORA_DEV_EVM_DEPLOY_INIT_ARG_6=0 \
  GORA_DEV_EVM_DEPLOY_INIT_ARG_7=0 \
  GORA_DEV_EVM_DEPLOY_INIT_ARG_8=0 \
    ./deploy $GETH_URL_MASTER main main_$CHAIN.addr main.sol:Gora
}

echo 'Preparing Gora local EVM development environment'

check_prereqs;
start_geth;

deploy_gora_contracts;
setup_gora_config;

echo "Setting devlopment node's stake"
$GORA_DEV_CLI_TOOL evm-set --network $MASTER_CHAIN --stake $NODE_STAKE

GORA_LOG=./gora.log
LOGS+=" $GORA_LOG"
$GORA_DEV_CLI_TOOL docker-start >$GORA_LOG 2>&1 &
CHILD_PIDS+=" $!"

echo "-----------------------------------------------------------------------------"
echo "Tailing log files, Ctrl-C to stop and terminate all child processes"
echo "-----------------------------------------------------------------------------"
tail -n +1 -F $LOGS
kill $CHILD_PIDS
