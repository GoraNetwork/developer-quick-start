#!/usr/bin/env node
"use strict";

for (const event of [ "unhandledRejection", "uncaughtException" ]) {
  process.on(event, err => {
    console.log(err.stack ?? err);
    process.exit(1);
  });
}

const Fs = require("fs");
const Path = require("path");
const ChildProcess = require("child_process");
const TimersPromises = require("timers/promises");
const Ethers = require("ethers");
const { deploy, loadContract } = require("./deploy");

// Solidity compilation command and options.
const solcCmd = "./solc";
const solcOpts = [ "--no-color", "--combined-json", "abi,bin" ];

// Read a smart contract address file.
function readContractAddr(name) {

  const file = name + ".addr";
  console.log(`Reading contract address from "${file}"`);
  return Fs.existsSync(file) ? Fs.readFileSync(file, "ascii") : null;
}

// Return Gora main contract address.
function getMainContractAddr(network) {

  return process.env.GORA_EXAMPLE_EVM_MAIN_ADDR
         || readContractAddr("main_" + network);
}

// Enable logging of a contracts log messages via console.
async function enableContractLogs(contract, name) {

  const lastRound = await contract.runner.provider.getBlockNumber();
  console.log(`Enabling logs for contract "${name}" at "${contract.target}"`
              + ` from round "${lastRound}"`);
  contract.on("LogMsg", (str, num, bin, info) => {
    if (info.log.blockNumber > lastRound) // ignore older events
      console.log(`CONTRACT ${name} @${info.log.blockNumber} ${str} ${num} ${bin}`);
  });
}

// Load Gora main contract, return its instance.
async function setupGoraContract(signer, network) {

  const addr = getMainContractAddr(network);
  if (!addr)
    throw `Unable to determine Gora main contract address for network "${network}"`;
  console.log(`Using address "${addr}" for Gora main contract`);
  const [ abi ] = loadContract("main");
  const res = new Ethers.Contract(addr, abi, signer);

  // Check that main contract is really at this address. It will not be if
  // blockchain was restarted without contract redeployment and .addr file update.
  let goraName;
  let err;
  try {
    goraName = await res.goraName();
  }
  catch (e) {
    if (e.code != "BAD_DATA" || e.value != "0x")
      err = e.message;
  }
  if (err)
    throw "Error checking Gora main contract address: " + err;
  if (goraName != "main")
    throw `Gora main contract not found at "${addr}"`;

  await enableContractLogs(res, "main");
  return res;
}

async function connectToEvmNode(url) {

  console.log(`Using EVM API at: ${url}`);
  const provider = new Ethers.JsonRpcProvider(url, null, {
    batchMaxCount: 1,
    batchStallTime: 0,
    staticNetwork: true,
    polling: true,
    pollingInterval: 1000,
  });

   // Work around occasional wrong block range parameter order in ethers.js
   const getLogsOrig = provider.getLogs;
   provider.getLogs = filterOrig => {
     const filter = { ...filterOrig };
     if (filter.fromBlock > filter.toBlock) {
       [ filter.fromBlock, filter.toBlock ]
       = [ filter.toBlock, filter.fromBlock ];
     }
     return getLogsOrig.call(provider, filter);
   };

  let rawSigner;
  if (process.env.GORA_EXAMPLE_EVM_KEY) {
    const key = process.env.GORA_EXAMPLE_EVM_KEY;
    const keyHex = key.indexOf("/") >= 0 ? Fs.readFileSync(key, "ascii") : key;
    rawSigner = new Ethers.Wallet(keyHex, provider);
  }
  else
    rawSigner = await provider.getSigner();
  const signer = new Ethers.NonceManager(rawSigner);

  let round
  try { round = await provider.getBlockNumber(); } catch (e) {};
  if (!(round >= 0))
    throw `EVM API endpoint at "${url}" is unavailable`;

  return [ signer, provider ];
}

// Run an EVM example by name.
async function runExample(apiUrl, name, network) {

  let [ signer, provider ] = await connectToEvmNode(apiUrl);
  const goraContract = await setupGoraContract(signer, network);

  const solName = `example_${name}.sol`;
  const solArgs = [ ...solcOpts, solName ];
  console.log("Running:", solcCmd, solArgs.join(" "));

  const solRes = ChildProcess.spawnSync(solcCmd, solArgs);
  if (!solRes.stdout.length)
    throw solRes.stderr.toString();

  const compiled = JSON.parse(solRes.stdout.toString());
  const args = [ getMainContractAddr(network) ];
  if (name == "off_chain")
    args.push(Fs.readFileSync("off_chain_example.wasm"));

  const exampleContract = await deploy({
    signer, compiled, args,
    name: `example_${name}`,
  });
  await enableContractLogs(exampleContract, "example");

  let createdReqId;
  goraContract.on("CreateRequest", (_, reqId) => createdReqId = reqId);

  console.log("Making a Gora request");
  await exampleContract.runner.reset(); // guard against "nonce already used"
  const txnReceipt = await (await exampleContract.makeGoraRequest()).wait();
  console.log(`Done, round "${txnReceipt.blockNumber}", txn "${txnReceipt.hash}"`);

  const timeout = process.env.GORA_EXAMPLE_EVM_TIMEOUT || 60000;
  const timeoutInterval = 1000;
  for (let elapsed = 0; elapsed <= timeout; elapsed += timeoutInterval) {
    if (createdReqId)
      break;
    await TimersPromises.setTimeout(timeoutInterval);
  }

  if (!createdReqId)
    throw "Failed to create Gora request or retrieve its ID";
  console.log(`Created Gora request ID: ${createdReqId}`);

  let isReceived = false;
  console.log(`Waiting for response up to "${timeout}" ms.`);

  for (let elapsed = 0; elapsed <= timeout; elapsed += timeoutInterval) {
    const lastReqId = await exampleContract.lastReqId();
    if (lastReqId == createdReqId) {
      isReceived = true;
      break;
    }
    await TimersPromises.setTimeout(timeoutInterval);
  }

  if (isReceived) {
    console.log("Success, response received by destination method");
    const lastValueRaw = await exampleContract.lastValue();
    const lastValueStr = Buffer.from(lastValueRaw.slice(2), "hex").toString();
    console.log(`Response value: "${lastValueStr}"`);
  }
  else
    console.log("Fail, response NOT received by destination method");

  goraContract.removeAllListeners();
  exampleContract.removeAllListeners();
}

if (process.argv.length < 3) {
  const scriptName = Path.basename(process.argv[1]);
  console.log(`Usage: ${scriptName} <example name> [network name]`);
  console.log(`Example: ${scriptName} basic baselocal`);
  return;
}

const exampleName = process.argv[2];
const networkName = process.argv[3] || "baselocal";
console.log(`Running example "${exampleName}" on network "${networkName}"`);

const apiUrl = process.env.GORA_EXAMPLE_EVM_API_URL || "http://localhost:8546";
runExample(apiUrl, exampleName, networkName);